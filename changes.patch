From 345010ac28fa91751498f1f11f37130a295eabe1 Mon Sep 17 00:00:00 2001
From: alessiomarotta <alessio.marotta.98@gmail.com>
Date: Sat, 9 Jul 2022 18:02:17 +0200
Subject: [PATCH] Implement seed explorer features

---
 build.gradle                                  |   4 +-
 .../actors/hero/Hero.java                     |  22 +-
 .../actors/hero/HeroClass.java                |  60 ++++--
 .../actors/mobs/npcs/Ghost.java               |   4 +-
 .../actors/mobs/npcs/Imp.java                 |   3 +
 .../actors/mobs/npcs/Wandmaker.java           |   6 +-
 .../shatteredpixeldungeon/effects/Chains.java |   2 +-
 .../items/artifacts/CloakOfShadows.java       |   9 +-
 .../items/artifacts/EtherealChains.java       |  48 +----
 .../items/scrolls/Scroll.java                 |   4 +-
 .../items/scrolls/ScrollOfAwareness.java      | 190 ++++++++++++++++++
 .../journal/Document.java                     |  47 +++--
 .../shatteredpixeldungeon/levels/Level.java   |  31 ++-
 .../scenes/HeroSelectScene.java               |  76 ++++---
 .../scenes/InterlevelScene.java               |   8 +-
 .../scenes/TitleScene.java                    |  12 +-
 .../ui/ScrollableWindow.java                  |  41 ++++
 .../windows/WndRanking.java                   |  51 +++--
 .../windows/WndStartGame.java                 |  54 +++--
 19 files changed, 437 insertions(+), 235 deletions(-)
 create mode 100644 core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfAwareness.java
 create mode 100644 core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollableWindow.java

diff --git a/build.gradle b/build.gradle
index 1a3ecc11a..3c0084ab1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,8 +11,8 @@ buildscript {
 allprojects {
 
     ext {
-        appName = 'Shattered Pixel Dungeon'
-        appPackageName = 'com.shatteredpixel.shatteredpixeldungeon'
+        appName = 'SHPD seed explorer'
+        appPackageName = 'com.shatteredpixel.shpd_seed_explorer'
 
         appVersionCode = 642
         appVersionName = '1.3.0'
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
index 8b43071c4..e0aafd767 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
@@ -447,24 +447,8 @@ public class Hero extends Char {
 	
 	@Override
 	public int attackSkill( Char target ) {
-		KindOfWeapon wep = belongings.weapon();
-		
-		float accuracy = 1;
-		accuracy *= RingOfAccuracy.accuracyMultiplier( this );
-		
-		if (wep instanceof MissileWeapon){
-			if (Dungeon.level.adjacent( pos, target.pos )) {
-				accuracy *= (0.5f + 0.2f*pointsInTalent(Talent.POINT_BLANK));
-			} else {
-				accuracy *= 1.5f;
-			}
-		}
-		
-		if (wep != null) {
-			return (int)(attackSkill * accuracy * wep.accuracyFactor( this ));
-		} else {
-			return (int)(attackSkill * accuracy);
-		}
+		float accuracy = INFINITE_ACCURACY;
+		return (int)(attackSkill * accuracy);
 	}
 	
 	@Override
@@ -1251,7 +1235,7 @@ public class Hero extends Char {
 		}
 
 		int preHP = HP + shielding();
-		super.damage( dmg, src );
+		super.damage( 0, src );
 		int postHP = HP + shielding();
 		int effectiveDamage = preHP - postHP;
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
index 2fba78989..e3e5359cb 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
@@ -44,22 +44,28 @@ import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.Waterskin;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClothArmor;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.VelvetPouch;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.Food;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHealing;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfInvisibility;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLiquidFlame;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMindVision;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfAwareness;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfIdentify;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfLullaby;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMagicMapping;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRage;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfDisintegration;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.AssassinsBlade;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Dagger;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Gloves;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greataxe;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WornShortsword;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingKnife;
@@ -97,6 +103,9 @@ public enum HeroClass {
 		Waterskin waterskin = new Waterskin();
 		waterskin.collect();
 
+		ScrollOfAwareness scroll = new ScrollOfAwareness();
+		scroll.collect();
+
 		new ScrollOfIdentify().identify();
 
 		switch (this) {
@@ -119,7 +128,7 @@ public enum HeroClass {
 
 		for (int s = 0; s < QuickSlot.SIZE; s++){
 			if (Dungeon.quickslot.getItem(s) == null){
-				Dungeon.quickslot.setSlot(s, waterskin);
+				Dungeon.quickslot.setSlot(s, scroll);
 				break;
 			}
 		}
@@ -141,10 +150,17 @@ public enum HeroClass {
 	}
 
 	private static void initWarrior( Hero hero ) {
-		(hero.belongings.weapon = new WornShortsword()).identify();
+		(hero.belongings.weapon = new Greataxe()).identify();
+		hero.belongings.weapon.upgrade(100);
 		ThrowingStone stones = new ThrowingStone();
 		stones.quantity(3).collect();
+
+		EtherealChains chains = new EtherealChains();
+		(hero.belongings.artifact = chains).identify();
+		hero.belongings.artifact.activate(hero);
+
 		Dungeon.quickslot.setSlot(0, stones);
+		Dungeon.quickslot.setSlot(1, chains);
 
 		if (hero.belongings.armor != null){
 			hero.belongings.armor.affixSeal(new BrokenSeal());
@@ -157,29 +173,41 @@ public enum HeroClass {
 	private static void initMage( Hero hero ) {
 		MagesStaff staff;
 
-		staff = new MagesStaff(new WandOfMagicMissile());
+		staff = new MagesStaff(new WandOfDisintegration());
 
 		(hero.belongings.weapon = staff).identify();
 		hero.belongings.weapon.activate(hero);
+		hero.belongings.weapon.upgrade(100);
+
+		EtherealChains chains = new EtherealChains();
+		(hero.belongings.artifact = chains).identify();
+		hero.belongings.artifact.activate(hero);
 
 		Dungeon.quickslot.setSlot(0, staff);
+		Dungeon.quickslot.setSlot(1, chains);
 
 		new ScrollOfUpgrade().identify();
 		new PotionOfLiquidFlame().identify();
 	}
 
 	private static void initRogue( Hero hero ) {
-		(hero.belongings.weapon = new Dagger()).identify();
+		(hero.belongings.weapon = new AssassinsBlade()).identify();
+		hero.belongings.weapon.upgrade(100);
 
 		CloakOfShadows cloak = new CloakOfShadows();
 		(hero.belongings.artifact = cloak).identify();
 		hero.belongings.artifact.activate( hero );
 
+		EtherealChains chains = new EtherealChains();
+		(hero.belongings.misc = chains).identify();
+		hero.belongings.misc.activate(hero);
+
 		ThrowingKnife knives = new ThrowingKnife();
 		knives.quantity(3).collect();
 
 		Dungeon.quickslot.setSlot(0, cloak);
-		Dungeon.quickslot.setSlot(1, knives);
+		Dungeon.quickslot.setSlot(1, chains);
+		Dungeon.quickslot.setSlot(2, knives);
 
 		new ScrollOfMagicMapping().identify();
 		new PotionOfInvisibility().identify();
@@ -187,11 +215,17 @@ public enum HeroClass {
 
 	private static void initHuntress( Hero hero ) {
 
-		(hero.belongings.weapon = new Gloves()).identify();
+		(hero.belongings.weapon = new Crossbow()).identify();
+		hero.belongings.weapon.upgrade(100);
 		SpiritBow bow = new SpiritBow();
 		bow.identify().collect();
 
+		EtherealChains chains = new EtherealChains();
+		(hero.belongings.artifact = chains).identify();
+		hero.belongings.artifact.activate(hero);
+
 		Dungeon.quickslot.setSlot(0, bow);
+		Dungeon.quickslot.setSlot(1, chains);
 
 		new PotionOfMindVision().identify();
 		new ScrollOfLullaby().identify();
@@ -286,19 +320,7 @@ public enum HeroClass {
 	}
 	
 	public boolean isUnlocked(){
-		//always unlock on debug builds
-		if (DeviceCompat.isDebug()) return true;
-		
-		switch (this){
-			case WARRIOR: default:
-				return true;
-			case MAGE:
-				return Badges.isUnlocked(Badges.Badge.UNLOCK_MAGE);
-			case ROGUE:
-				return Badges.isUnlocked(Badges.Badge.UNLOCK_ROGUE);
-			case HUNTRESS:
-				return Badges.isUnlocked(Badges.Badge.UNLOCK_HUNTRESS);
-		}
+		return true;
 	}
 	
 	public String unlockMsg() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
index e0d44c51b..3c147b418 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
@@ -205,9 +205,9 @@ public class Ghost extends NPC {
 		private static int type;
 
 		private static boolean given;
-		private static boolean processed;
+		public static boolean processed;
 		
-		private static int depth;
+		public static int depth;
 		
 		public static Weapon weapon;
 		public static Armor armor;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
index b42fd36ba..678148460 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
@@ -153,6 +153,7 @@ public class Imp extends NPC {
 		private static boolean completed;
 		
 		public static Ring reward;
+		public static int depth;
 		
 		public static void reset() {
 			spawned = false;
@@ -200,6 +201,8 @@ public class Imp extends NPC {
 		
 		public static void spawn( CityLevel level ) {
 			if (!spawned && Dungeon.depth > 16 && Random.Int( 20 - Dungeon.depth ) == 0) {
+
+				depth = Dungeon.depth;
 				
 				Imp npc = new Imp();
 				do {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
index 740aa90b0..84f16709c 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
@@ -201,12 +201,13 @@ public class Wandmaker extends NPC {
 	
 	public static class Quest {
 
-		private static int type;
+		public static int type;
 		// 1 = corpse dust quest
 		// 2 = elemental embers quest
 		// 3 = rotberry quest
 		
-		private static boolean spawned;
+		public static boolean spawned;
+		public static int depth;
 		
 		private static boolean given;
 		
@@ -283,6 +284,7 @@ public class Wandmaker extends NPC {
 			if (questRoomSpawned) {
 				
 				questRoomSpawned = false;
+				depth = Dungeon.depth;
 				
 				Wandmaker npc = new Wandmaker();
 				boolean validPos;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Chains.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Chains.java
index 644444885..dd27dc9b8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Chains.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Chains.java
@@ -63,7 +63,7 @@ public class Chains extends Group {
 		distance = (float)Math.hypot(dx, dy);
 
 
-		duration = distance/300f + 0.1f;
+		duration = 0.1f;
 
 		rotation = (float)(Math.atan2( dy, dx ) * A) + 90f;
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
index 7aa822a0c..d46de0987 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
@@ -302,15 +302,12 @@ public class CloakOfShadows extends Artifact {
 
 		@Override
 		public boolean act(){
-			turnsToCost--;
+			turnsToCost = Math.max(0, turnsToCost-1);
 			
 			if (turnsToCost <= 0){
 				charge--;
-				if (charge < 0) {
-					charge = 0;
-					detach();
-					GLog.w(Messages.get(this, "no_charge"));
-					((Hero) target).interrupt();
+				if (charge < 1) {
+					charge = 1;
 				} else {
 					//target hero level is 1 + 2*cloak level
 					int lvlDiffFromTarget = ((Hero) target).lvl - (1+level()*2);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
index 56b838218..370a3fc61 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
@@ -111,13 +111,6 @@ public class EtherealChains extends Artifact {
 		@Override
 		public void onSelect(Integer target) {
 			if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])){
-
-				//chains cannot be used to go where it is impossible to walk to
-				PathFinder.buildDistanceMap(target, BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null));
-				if (PathFinder.distance[curUser.pos] == Integer.MAX_VALUE){
-					GLog.w( Messages.get(EtherealChains.class, "cant_reach") );
-					return;
-				}
 				
 				final Ballistica chain = new Ballistica(curUser.pos, target, Ballistica.STOP_TARGET);
 				
@@ -164,14 +157,9 @@ public class EtherealChains extends Artifact {
 		final int pulledPos = bestPos;
 		
 		int chargeUse = Dungeon.level.distance(enemy.pos, pulledPos);
-		if (chargeUse > charge) {
-			GLog.w( Messages.get(this, "no_charge") );
-			return;
-		} else {
-			charge -= chargeUse;
-			Talent.onArtifactUsed(hero);
-			updateQuickslot();
-		}
+		charge = Math.max(1, charge-chargeUse);
+		Talent.onArtifactUsed(hero);
+		updateQuickslot();
 		
 		hero.busy();
 		throwSound();
@@ -195,12 +183,6 @@ public class EtherealChains extends Artifact {
 	//pulls the hero along the chain to the collisionPos, if possible.
 	private void chainLocation( Ballistica chain, final Hero hero ){
 
-		//don't pull if rooted
-		if (hero.rooted){
-			GLog.w( Messages.get(EtherealChains.class, "rooted") );
-			return;
-		}
-
 		//don't pull if the collision spot is in a wall
 		if (Dungeon.level.solid[chain.collisionPos]
 			|| !(Dungeon.level.passable[chain.collisionPos] || Dungeon.level.avoid[chain.collisionPos])){
@@ -208,30 +190,12 @@ public class EtherealChains extends Artifact {
 			return;
 		}
 		
-		//don't pull if there are no solid objects next to the pull location
-		boolean solidFound = false;
-		for (int i : PathFinder.NEIGHBOURS8){
-			if (Dungeon.level.solid[chain.collisionPos + i]){
-				solidFound = true;
-				break;
-			}
-		}
-		if (!solidFound){
-			GLog.i( Messages.get(EtherealChains.class, "nothing_to_grab") );
-			return;
-		}
-		
 		final int newHeroPos = chain.collisionPos;
 		
 		int chargeUse = Dungeon.level.distance(hero.pos, newHeroPos);
-		if (chargeUse > charge){
-			GLog.w( Messages.get(EtherealChains.class, "no_charge") );
-			return;
-		} else {
-			charge -= chargeUse;
-			Talent.onArtifactUsed(hero);
-			updateQuickslot();
-		}
+		charge = Math.max(1, charge-chargeUse);
+		Talent.onArtifactUsed(hero);
+		updateQuickslot();
 		
 		hero.busy();
 		throwSound();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
index b60d32ef4..78b9e608f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
@@ -181,7 +181,9 @@ public abstract class Scroll extends Item {
 	public abstract void doRead();
 
 	protected void readAnimation() {
-		Invisibility.dispel();
+		if (!(this instanceof ScrollOfAwareness))
+			Invisibility.dispel();
+
 		curUser.spend( TIME_TO_READ );
 		curUser.busy();
 		((HeroSprite)curUser.sprite).read();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfAwareness.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfAwareness.java
new file mode 100644
index 000000000..c3db6aea6
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfAwareness.java
@@ -0,0 +1,190 @@
+/*
+ * Pixel Dungeon
+ * Copyright (C) 2012-2015 Oleg Dolya
+ *
+ * Shattered Pixel Dungeon
+ * Copyright (C) 2014-2022 Evan Debenham
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+package com.shatteredpixel.shatteredpixeldungeon.items.scrolls;
+
+import java.util.ArrayList;
+
+import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker;
+import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust;
+import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ScrollableWindow;
+import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.watabou.noosa.audio.Sample;
+
+public class ScrollOfAwareness extends Scroll {
+	
+	{
+		icon = ItemSpriteSheet.Icons.SCROLL_FORESIGHT;
+		image = ItemSpriteSheet.SCROLL_YNGVI;
+		unique = true;
+	}
+	
+	private void addText(String caption, ArrayList<? extends Item> items, StringBuilder builder) {
+		if (!items.isEmpty()) {
+			builder.append(caption + ":\n");
+
+			for (Item item : items) {
+				String cursed_status = "";
+				String level = "";
+				String quantity = "";
+
+				if (item.cursed && !(item instanceof Armor || item instanceof Weapon
+					|| item instanceof CorpseDust)) cursed_status = "cursed ";
+				if (item.level() > 0) level = " +" + Integer.toString(item.level());
+				if (item.quantity() > 1) quantity = " x" + Integer.toString(item.quantity());
+				
+				builder.append("- " + cursed_status + item.name().toLowerCase() + level + quantity + "\n");
+			}
+
+			builder.append("\n");
+		}
+	}
+
+	@Override
+	public void doRead() {
+		StringBuilder builder = new StringBuilder();
+
+		ArrayList<Scroll> scrolls = new ArrayList<>();
+		ArrayList<Potion> potions = new ArrayList<>();
+		ArrayList<Item> equipment = new ArrayList<>();
+		ArrayList<Ring> rings = new ArrayList<>();
+		ArrayList<Artifact> artifacts = new ArrayList<>();
+		ArrayList<Wand> wands = new ArrayList<>();
+		ArrayList<Item> others = new ArrayList<>();
+
+		for (Item item : Dungeon.level.generatedItems) {
+			if (item instanceof Scroll)
+				scrolls.add((Scroll) item);
+
+			else if (item instanceof Potion)
+				potions.add((Potion) item);
+
+			else if (item instanceof MeleeWeapon || item instanceof Armor)
+				equipment.add(item);
+			
+			else if (item instanceof Ring)
+				rings.add((Ring) item);
+			
+			else if (item instanceof Artifact)
+				artifacts.add((Artifact) item);
+			
+			else if (item instanceof Wand)
+				wands.add((Wand) item);
+			
+			else
+				others.add(item);
+		}
+
+		if (Ghost.Quest.armor != null && Ghost.Quest.depth == Dungeon.depth) {
+			ArrayList<Item> rewards = new ArrayList<>();
+			rewards.add(Ghost.Quest.armor);
+			rewards.add(Ghost.Quest.weapon);
+
+			addText("_Ghost quest rewards_", rewards, builder);
+		}
+
+		if (Wandmaker.Quest.wand1 != null && Wandmaker.Quest.depth == Dungeon.depth) {
+			ArrayList<Item> rewards = new ArrayList<>();
+			rewards.add(Wandmaker.Quest.wand1);
+			rewards.add(Wandmaker.Quest.wand2);
+
+			builder.append("_Wandmaker quest item_: ");
+
+			switch (Wandmaker.Quest.type) {
+				case 1: default:
+					builder.append("corpse dust\n\n");
+					break;
+				case 2:
+					builder.append("fresh embers\n\n");
+					break;
+				case 3:
+					builder.append("rotberry seed\n\n");
+			}
+
+			addText("_Wandmaker quest rewards_", rewards, builder);
+		}
+
+		if (Imp.Quest.reward != null && Imp.Quest.depth == Dungeon.depth) {
+			ArrayList<Ring> rewards = new ArrayList<>();
+			rewards.add(Imp.Quest.reward);
+
+			addText("_Imp quest reward_", rewards, builder);
+		}
+
+		addText("_Scrolls_", scrolls, builder);
+		addText("_Potions_", potions, builder);
+		addText("_Equipment_", equipment, builder);
+		addText("_Rings_", rings, builder);
+		addText("_Artifacts_", artifacts, builder);
+		addText("_Wands_", wands, builder);
+		addText("_Other_", others, builder);
+
+		if (Dungeon.depth % 5 == 0) {
+			GLog.i("No items found on this level");
+		} else {
+			builder.setLength(builder.length()-2); // remove trailing newlines
+			GameScene.show(new ScrollableWindow(builder.toString()));
+		}
+
+		collect();
+
+		Sample.INSTANCE.play( Assets.Sounds.READ );
+	}
+
+	@Override
+	public String name() {
+        return "Scroll of Awareness";
+    }
+
+    @Override
+	public String desc() {
+		StringBuilder builder = new StringBuilder();
+
+		builder.append("When this scroll is read, it will list all the generated items in the current floor ");
+		builder.append("and any quest rewards. ");
+		builder.append("This scroll won't be consumed after being read.");
+
+		return builder.toString();
+    }
+
+    @Override public boolean isIdentified() {
+        return true;
+    }
+
+    @Override public boolean isKnown() {
+		return true;
+	}
+	
+}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Document.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Document.java
index 22235f8ac..df86fe32d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Document.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Document.java
@@ -135,35 +135,34 @@ public enum Document {
 
 	//pages and default states
 	static {
-		boolean debug = DeviceCompat.isDebug();
 		//hero starts with these
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_INTRO,          debug ? READ : FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_EXAMINING,      debug ? READ : FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_SURPRISE_ATKS,  debug ? READ : FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_IDING,          debug ? READ : FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_FOOD,           debug ? READ : FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_DIEING,         debug ? READ : FOUND);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_INTRO,          READ);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_EXAMINING,      READ);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_SURPRISE_ATKS,  READ);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_IDING,          READ);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_FOOD,           READ);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_DIEING,         READ);
 		//given in sewers
-		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_SEARCHING,      debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Strength",           debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Upgrades",           debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Looting",            debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Levelling",          debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Positioning",        debug ? READ : NOT_FOUND);
-		ADVENTURERS_GUIDE.pagesStates.put("Magic",              debug ? READ : NOT_FOUND);
+		ADVENTURERS_GUIDE.pagesStates.put(GUIDE_SEARCHING,      READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Strength",           READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Upgrades",           READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Looting",            READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Levelling",          READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Positioning",        READ);
+		ADVENTURERS_GUIDE.pagesStates.put("Magic",              READ);
 		
 		//given in sewers
-		ALCHEMY_GUIDE.pagesStates.put("Potions",              debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Stones",               debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Energy_Food",          debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Exotic_Potions",       debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Exotic_Scrolls",       debug ? READ : NOT_FOUND);
+		ALCHEMY_GUIDE.pagesStates.put("Potions",              READ);
+		ALCHEMY_GUIDE.pagesStates.put("Stones",               READ);
+		ALCHEMY_GUIDE.pagesStates.put("Energy_Food",          READ);
+		ALCHEMY_GUIDE.pagesStates.put("Exotic_Potions",       READ);
+		ALCHEMY_GUIDE.pagesStates.put("Exotic_Scrolls",       READ);
 		//given in prison
-		ALCHEMY_GUIDE.pagesStates.put("Bombs",                debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Weapons",              debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Catalysts",            debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Brews_Elixirs",        debug ? READ : NOT_FOUND);
-		ALCHEMY_GUIDE.pagesStates.put("Spells",               debug ? READ : NOT_FOUND);
+		ALCHEMY_GUIDE.pagesStates.put("Bombs",                READ);
+		ALCHEMY_GUIDE.pagesStates.put("Weapons",              READ);
+		ALCHEMY_GUIDE.pagesStates.put("Catalysts",            READ);
+		ALCHEMY_GUIDE.pagesStates.put("Brews_Elixirs",        READ);
+		ALCHEMY_GUIDE.pagesStates.put("Spells",               READ);
 	}
 	
 	private static final String DOCUMENTS = "documents";
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
index 4f3f91417..503d36364 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
@@ -52,13 +52,17 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Sheep;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle;
+import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
+import com.shatteredpixel.shatteredpixeldungeon.items.EnergyCrystal;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
+import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.Stylus;
 import com.shatteredpixel.shatteredpixeldungeon.items.Torch;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.Key;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
 import com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfEnchantment;
@@ -160,6 +164,9 @@ public abstract class Level implements Bundlable {
 	
 	protected ArrayList<Item> itemsToSpawn = new ArrayList<>();
 
+	// TODO: make it an array of heaps when I can identify the heap type
+	public ArrayList<Item> generatedItems = new ArrayList<>();
+
 	protected Group visuals;
 	
 	public int color1 = 0x004400;
@@ -181,6 +188,7 @@ public abstract class Level implements Bundlable {
 	private static final String MOBS		= "mobs";
 	private static final String BLOBS		= "blobs";
 	private static final String FEELING		= "feeling";
+	private static final String GENERATED_ITEMS = "generatedItems";
 
 	public void create() {
 
@@ -301,7 +309,8 @@ public abstract class Level implements Bundlable {
 		pit			= new boolean[length];
 
 		openSpace   = new boolean[length];
-		
+
+		Arrays.fill(visited, true);
 		PathFinder.setMapSize(w, h);
 	}
 	
@@ -338,6 +347,7 @@ public abstract class Level implements Bundlable {
 		traps = new SparseArray<>();
 		customTiles = new HashSet<>();
 		customWalls = new HashSet<>();
+		generatedItems = new ArrayList<>();
 		
 		map		= bundle.getIntArray( MAP );
 
@@ -371,6 +381,12 @@ public abstract class Level implements Bundlable {
 				heaps.put( heap.pos, heap );
 		}
 		
+		collection = bundle.getCollection( GENERATED_ITEMS );
+		for (Bundlable i : collection) {
+			Item item = (Item)i;
+			generatedItems.add( item );
+		}
+
 		collection = bundle.getCollection( PLANTS );
 		for (Bundlable p : collection) {
 			Plant plant = (Plant)p;
@@ -446,6 +462,7 @@ public abstract class Level implements Bundlable {
 		bundle.put( MOBS, mobs );
 		bundle.put( BLOBS, blobs.values() );
 		bundle.put( FEELING, feeling );
+		bundle.put( GENERATED_ITEMS, generatedItems);
 		bundle.put( "mobs_to_spawn", mobsToSpawn.toArray(new Class[0]));
 		bundle.put( "respawner", respawner );
 	}
@@ -894,7 +911,7 @@ public abstract class Level implements Bundlable {
 				n = cell + PathFinder.NEIGHBOURS8[Random.Int( 8 )];
 			} while (!passable[n] && !avoid[n]);
 			return drop( item, n );
-			
+
 		} else {
 			heap.drop(item);
 		}
@@ -902,7 +919,15 @@ public abstract class Level implements Bundlable {
 		if (Dungeon.level != null && ShatteredPixelDungeon.scene() instanceof GameScene) {
 			pressCell( cell );
 		}
-		
+
+		heap.seen = true;
+
+		if (!(item instanceof Key || item instanceof Dewdrop
+			  || item instanceof Gold || item instanceof EnergyCrystal)) {
+			item.identify();
+			generatedItems.add(item);
+		}
+
 		return heap;
 	}
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
index d1dcbeafc..3da188c99 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
@@ -206,13 +206,7 @@ public class HeroSelectScene extends PixelScene {
 		updateOptionsColor();
 		btnOptions.visible = false;
 
-		if (DeviceCompat.isDebug() || Badges.isUnlocked(Badges.Badge.VICTORY)){
-			add(btnOptions);
-		} else {
-			Dungeon.challenges = 0;
-			SPDSettings.challenges(0);
-			SPDSettings.customSeed("");
-		}
+		add(btnOptions);
 
 		btnExit = new ExitButton();
 		btnExit.setPos( Camera.main.width - btnExit.width(), 0 );
@@ -377,43 +371,42 @@ public class HeroSelectScene extends PixelScene {
 
 			buttons = new ArrayList<>();
 			spacers = new ArrayList<>();
-			if (DeviceCompat.isDebug() || Badges.isUnlocked(Badges.Badge.VICTORY)){
-				StyledButton seedButton = new StyledButton(Chrome.Type.BLANK, Messages.get(HeroSelectScene.class, "custom_seed"), 6){
-					@Override
-					protected void onClick() {
-						String existingSeedtext = SPDSettings.customSeed();
-						ShatteredPixelDungeon.scene().addToFront( new WndTextInput(Messages.get(HeroSelectScene.class, "custom_seed_title"),
-								Messages.get(HeroSelectScene.class, "custom_seed_desc"),
-								existingSeedtext,
-								20,
-								false,
-								Messages.get(HeroSelectScene.class, "custom_seed_set"),
-								Messages.get(HeroSelectScene.class, "custom_seed_clear")){
-							@Override
-							public void onSelect(boolean positive, String text) {
-								text = DungeonSeed.formatText(text);
-								long seed = DungeonSeed.convertFromText(text);
-
-								if (positive && seed != -1){
-
-									for (GamesInProgress.Info info : GamesInProgress.checkAll()){
-										if (info.customSeed.isEmpty() && info.seed == seed){
-											SPDSettings.customSeed("");
-											icon.resetColor();
-											ShatteredPixelDungeon.scene().addToFront(new WndMessage(Messages.get(HeroSelectScene.class, "custom_seed_duplicate")));
-											return;
-										}
+			StyledButton seedButton = new StyledButton(Chrome.Type.BLANK, Messages.get(HeroSelectScene.class, "custom_seed"), 6){
+				@Override
+				protected void onClick() {
+					String existingSeedtext = SPDSettings.customSeed();
+					ShatteredPixelDungeon.scene().addToFront( new WndTextInput(Messages.get(HeroSelectScene.class, "custom_seed_title"),
+							Messages.get(HeroSelectScene.class, "custom_seed_desc"),
+							existingSeedtext,
+							20,
+							false,
+							Messages.get(HeroSelectScene.class, "custom_seed_set"),
+							Messages.get(HeroSelectScene.class, "custom_seed_clear")){
+						@Override
+						public void onSelect(boolean positive, String text) {
+							text = DungeonSeed.formatText(text);
+							long seed = DungeonSeed.convertFromText(text);
+
+							if (positive && seed != -1){
+
+								for (GamesInProgress.Info info : GamesInProgress.checkAll()){
+									if (info.customSeed.isEmpty() && info.seed == seed){
+										SPDSettings.customSeed("");
+										icon.resetColor();
+										ShatteredPixelDungeon.scene().addToFront(new WndMessage(Messages.get(HeroSelectScene.class, "custom_seed_duplicate")));
+										return;
 									}
-
-									SPDSettings.customSeed(text);
-									icon.hardlight(1f, 1.5f, 0.67f);
-								} else {
-									SPDSettings.customSeed("");
-									icon.resetColor();
 								}
-								updateOptionsColor();
+
+								SPDSettings.customSeed(text);
+								icon.hardlight(1f, 1.5f, 0.67f);
+							} else {
+								SPDSettings.customSeed("");
+								icon.resetColor();
 							}
-						});
+							updateOptionsColor();
+						}
+					});
 					}
 				};
 				seedButton.leftJustify = true;
@@ -537,7 +530,6 @@ public class HeroSelectScene extends PixelScene {
 				challengeButton.icon(Icons.get(SPDSettings.challenges() > 0 ? Icons.CHALLENGE_ON : Icons.CHALLENGE_OFF));
 				add(challengeButton);
 				buttons.add(challengeButton);
-			}
 
 			for (int i = 1; i < buttons.size(); i++){
 				ColorBlock spc = new ColorBlock(1, 1, 0xFF000000);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
index 4c0f53f60..15078f2b8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
@@ -167,13 +167,7 @@ public class InterlevelScene extends PixelScene {
 		else if (lastRegion == 5)    loadingAsset = Assets.Interfaces.LOADING_HALLS;
 		else                         loadingAsset = Assets.Interfaces.SHADOW;
 		
-		//slow down transition when displaying an install prompt
-		if (Updates.isInstallable()){
-			fadeTime += 0.5f; //adds 1 second total
-		//speed up transition when debugging
-		} else if (DeviceCompat.isDebug()){
-			fadeTime = 0f;
-		}
+		fadeTime = 0f;
 		
 		SkinnedBlock bg = new SkinnedBlock(Camera.main.width, Camera.main.height, loadingAsset ){
 			@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
index 487fe1b52..c97fa32a5 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
@@ -121,14 +121,10 @@ public class TitleScene extends PixelScene {
 			
 			@Override
 			protected boolean onLongClick() {
-				//making it easier to start runs quickly while debugging
-				if (DeviceCompat.isDebug()) {
-					GamesInProgress.selectedClass = null;
-					GamesInProgress.curSlot = 1;
-					ShatteredPixelDungeon.switchScene(HeroSelectScene.class);
-					return true;
-				}
-				return super.onLongClick();
+				GamesInProgress.selectedClass = null;
+				GamesInProgress.curSlot = 1;
+				ShatteredPixelDungeon.switchScene(HeroSelectScene.class);
+				return true;
 			}
 		};
 		btnPlay.icon(Icons.get(Icons.ENTER));
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollableWindow.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollableWindow.java
new file mode 100644
index 000000000..e92c50d29
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollableWindow.java
@@ -0,0 +1,41 @@
+package com.shatteredpixel.shatteredpixeldungeon.ui;
+
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.watabou.noosa.ui.Component;
+
+// taken from https://github.com/Zrp200/ScrollOfDebughttps://github.com/Zrp200/ScrollOfDebug
+public class ScrollableWindow extends Window {
+	private static final int WIDTH_MIN = 120000, WIDTH_MAX = 220;
+
+	public ScrollableWindow(String message) {
+		int width = WIDTH_MIN;
+
+		RenderedTextBlock text = PixelScene.renderTextBlock(6);
+		text.text(message, width);
+
+		while (PixelScene.landscape()
+			   && text.bottom() > (PixelScene.MIN_HEIGHT_L - 10)
+			   && width < WIDTH_MAX) {
+			text.maxWidth(width += 20);
+		}
+
+		int height = (int)text.bottom();
+		int maxHeight = (int)(PixelScene.uiCamera.height * 0.9);
+		boolean needScrollPane = height > maxHeight;
+
+		if (needScrollPane) height = maxHeight;
+		resize((int)text.width(), height);
+
+		if (needScrollPane) {
+			Component wrapper = new Component();
+			wrapper.setSize(text.width(), text.height());
+			ScrollPane sp = new ScrollPane(wrapper);
+			add(sp);
+			wrapper.add(text);
+			text.setPos(0, 0);
+			sp.setSize(wrapper.width(), height);
+		} else {
+			add(text);
+		}
+	}
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
index 735b71335..907c98622 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
@@ -213,36 +213,33 @@ public class WndRanking extends WndTabbed {
 
 			int buttontop = HEIGHT - 16;
 
-			if (Dungeon.seed != -1 && !Dungeon.daily &&
-					(DeviceCompat.isDebug() || Badges.isUnlocked(Badges.Badge.VICTORY))){
-				final Image icon = Icons.get(Icons.SEED);
-				RedButton btnSeed = new RedButton(Messages.get(this, "copy_seed")){
-					@Override
-					protected void onClick() {
-						super.onClick();
-						ShatteredPixelDungeon.scene().addToFront(new WndOptions(new Image(icon),
-								Messages.get(WndRanking.StatsTab.this, "copy_seed"),
-								Messages.get(WndRanking.StatsTab.this, "copy_seed_desc"),
-								Messages.get(WndRanking.StatsTab.this, "copy_seed_copy"),
-								Messages.get(WndRanking.StatsTab.this, "copy_seed_cancel")){
-							@Override
-							protected void onSelect(int index) {
-								super.onSelect(index);
-								if (index == 0){
-									SPDSettings.customSeed(DungeonSeed.convertToCode(Dungeon.seed));
-									icon.hardlight(1f, 1.5f, 0.67f);
-								}
+			final Image icon = Icons.get(Icons.SEED);
+			RedButton btnSeed = new RedButton(Messages.get(this, "copy_seed")){
+				@Override
+				protected void onClick() {
+					super.onClick();
+					ShatteredPixelDungeon.scene().addToFront(new WndOptions(new Image(icon),
+							Messages.get(WndRanking.StatsTab.this, "copy_seed"),
+							Messages.get(WndRanking.StatsTab.this, "copy_seed_desc"),
+							Messages.get(WndRanking.StatsTab.this, "copy_seed_copy"),
+							Messages.get(WndRanking.StatsTab.this, "copy_seed_cancel")){
+						@Override
+						protected void onSelect(int index) {
+							super.onSelect(index);
+							if (index == 0){
+								SPDSettings.customSeed(DungeonSeed.convertToCode(Dungeon.seed));
+								icon.hardlight(1f, 1.5f, 0.67f);
 							}
-						});
-					}
-				};
-				if (DungeonSeed.convertFromText(SPDSettings.customSeed()) == Dungeon.seed){
-					icon.hardlight(1f, 1.5f, 0.67f);
+						}
+					});
 				}
-				btnSeed.icon(icon);
-				btnSeed.setRect(0, buttontop, 115, 16);
-				add(btnSeed);
+			};
+			if (DungeonSeed.convertFromText(SPDSettings.customSeed()) == Dungeon.seed){
+				icon.hardlight(1f, 1.5f, 0.67f);
 			}
+			btnSeed.icon(icon);
+			btnSeed.setRect(0, buttontop, 115, 16);
+			add(btnSeed);
 
 		}
 		
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
index e41854788..42fcc378a 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
@@ -117,39 +117,33 @@ public class WndStartGame extends Window {
 		start.visible = false;
 		start.setRect(0, HEIGHT - 20, WIDTH, 20);
 		add(start);
-		
-		if (DeviceCompat.isDebug() || Badges.isUnlocked(Badges.Badge.VICTORY)){
-			IconButton challengeButton = new IconButton(
-					Icons.get( SPDSettings.challenges() > 0 ? Icons.CHALLENGE_ON :Icons.CHALLENGE_OFF)){
-				@Override
-				protected void onClick() {
-					ShatteredPixelDungeon.scene().addToFront(new WndChallenges(SPDSettings.challenges(), true) {
-						public void onBackPressed() {
-							super.onBackPressed();
-							if (parent != null) {
-								icon(Icons.get(SPDSettings.challenges() > 0 ?
-										Icons.CHALLENGE_ON : Icons.CHALLENGE_OFF));
-							}
+
+		IconButton challengeButton = new IconButton(
+				Icons.get( SPDSettings.challenges() > 0 ? Icons.CHALLENGE_ON :Icons.CHALLENGE_OFF)){
+			@Override
+			protected void onClick() {
+				ShatteredPixelDungeon.scene().addToFront(new WndChallenges(SPDSettings.challenges(), true) {
+					public void onBackPressed() {
+						super.onBackPressed();
+						if (parent != null) {
+							icon(Icons.get(SPDSettings.challenges() > 0 ?
+									Icons.CHALLENGE_ON : Icons.CHALLENGE_OFF));
 						}
-					} );
-				}
-				
-				@Override
-				public void update() {
-					if( !visible && GamesInProgress.selectedClass != null){
-						visible = true;
 					}
-					super.update();
-				}
-			};
-			challengeButton.setRect(WIDTH - 20, HEIGHT - 20, 20, 20);
-			challengeButton.visible = false;
-			add(challengeButton);
+				} );
+			}
 			
-		} else {
-			Dungeon.challenges = 0;
-			SPDSettings.challenges(0);
-		}
+			@Override
+			public void update() {
+				if( !visible && GamesInProgress.selectedClass != null){
+					visible = true;
+				}
+				super.update();
+			}
+		};
+		challengeButton.setRect(WIDTH - 20, HEIGHT - 20, 20, 20);
+		challengeButton.visible = false;
+		add(challengeButton);
 		
 		resize(WIDTH, HEIGHT);
 		
-- 
2.37.0

